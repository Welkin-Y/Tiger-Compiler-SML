structure A = Absyn


%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE | UMINUS

%nonterm  exp of A.exp | program of A.exp 
  | lvalue of A.var
  | dec of A.dec | decs of A.dec list 
  | tydecs of A.tydec list | tydec of A.tydec 
  | vardec of A.dec 
  | fundecs of A.fundec list | fundec of A.fundec  
  | ty of A.ty | tyid of Symbol.symbol 
  | tyfield of A.field | tyfields of A.field list | tyfield_end of A.field list
  | args of A.exp list 
  | expseq of (A.exp * A.pos) list | seq_cont of (A.exp * A.pos) list | seq of (A.exp * A.pos) list

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%nonassoc ASSIGN
%right THEN
%right ELSE
%left OR
%left AND
%nonassoc EQ NEQ LT LE GT GE DO OF
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS
%left RBRACE RPAREN RBRACK
%right COLON
%left ID
%right LBRACK



%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program: exp						(exp)

exp: NIL                 			(A.NilExp)
| INT               				(A.IntExp(INT))
| STRING            				(A.StringExp(STRING, STRINGleft))
| ID LPAREN args RPAREN				(A.CallExp({func=Symbol.symbol(ID), args=args, pos=IDleft}))	(* f(args) *)
| ID LPAREN RPAREN					(A.CallExp({func=Symbol.symbol(ID), args=[], pos=IDleft}))		(* f() *)
| exp PLUS exp      				(A.OpExp({left=exp1, oper=A.PlusOp, right=exp2, pos=exp1left}))
| exp MINUS exp     				(A.OpExp({left=exp1, oper=A.MinusOp, right=exp2, pos=exp1left}))
| MINUS exp %prec UMINUS 			(A.OpExp({left=A.IntExp(0), oper=A.MinusOp, right=exp, pos=exp1left}))
| exp TIMES exp     				(A.OpExp({left=exp1, oper=A.TimesOp, right=exp2, pos=exp1left}))
| exp DIVIDE exp    				(A.OpExp({left=exp1, oper=A.DivideOp, right=exp2, pos=exp1left}))
| exp EQ exp        				(A.OpExp({left=exp1, oper=A.EqOp, right=exp2, pos=exp1left}))
| exp NEQ exp       				(A.OpExp({left=exp1, oper=A.NeqOp, right=exp2, pos=exp1left}))
| exp LT exp        				(A.OpExp({left=exp1, oper=A.LtOp, right=exp2, pos=exp1left}))
| exp LE exp        				(A.OpExp({left=exp1, oper=A.LeOp, right=exp2, pos=exp1left}))
| exp GT exp        				(A.OpExp({left=exp1, oper=A.GtOp, right=exp2, pos=exp1left}))
| exp GE exp        				(A.OpExp({left=exp1, oper=A.GeOp, right=exp2, pos=exp1left}))
| exp AND exp       				(A.IfExp({test=exp1, then'=exp2, else'=NONE, pos=exp1left}))
| exp OR exp        				(A.IfExp({test=exp1, then'=exp1, else'=SOME(exp2), pos=exp1left}))
| IF exp THEN exp   				(A.IfExp({test=exp1, then'=exp2, else'=NONE, pos=IFleft}))
| IF exp THEN exp ELSE exp 			(A.IfExp({test=exp1, then'=exp2, else'=SOME(exp3), pos=IFleft}))
| WHILE exp DO exp					(A.WhileExp({test=exp1, body=exp2, pos=WHILEleft}))
| FOR ID ASSIGN exp TO exp DO exp	(A.ForExp({var=Symbol.symbol(ID),escape=ref true, lo=exp1, hi=exp2, body=exp3, pos=FORleft})) 
| BREAK								(A.BreakExp(BREAKleft))
| LET decs IN expseq END			(A.LetExp({decs=decs,body=A.SeqExp(expseq), pos=LETleft}))
| lvalue ASSIGN exp %prec ASSIGN	(A.AssignExp({var=lvalue, exp=exp, pos=lvalueleft}))
| lvalue                      (A.VarExp(lvalue))
(* Array Creation*)
| ID LBRACK exp RBRACK OF exp (A.ArrayExp({typ=Symbol.symbol(ID), size=exp1, init=exp2, pos=IDleft}))
(*Parentheses*)
| LPAREN exp RPAREN           (exp)
(*Sequence*)
| seq                         (A.SeqExp(seq))


lvalue: ID                    (A.SimpleVar(Symbol.symbol(ID), IDleft))
| lvalue DOT ID               (A.FieldVar(lvalue, Symbol.symbol(ID), lvalueleft))
| lvalue LBRACK exp RBRACK    (A.SubscriptVar(lvalue, exp, lvalueleft))
| ID LBRACK exp RBRACK        (A.SubscriptVar(A.SimpleVar(Symbol.symbol(ID), IDleft), exp, IDleft))


args: exp           				(exp::nil)
| exp COMMA args    				(exp::args)

(* sequence of zero or more expressions, separated by semicolons. The result (if any) of the last exp in the sequence is then the result of the entire let-expression.*)
expseq: seq_cont					(seq_cont)
| exp								((exp,expleft)::nil)
|									(nil)

(* A sequence of two or more expressions, surrounded by parentheses and separated by semicolons (exp; exp; . . . exp) evaluates all the expressions in order. The result of a sequence is the result (if any) yielded by the last of the expressions. *)
seq: LPAREN seq_cont RPAREN			(seq_cont)

seq_cont: exp SEMICOLON exp			((exp1, exp1left)::(exp2,exp2left)::nil)
| exp SEMICOLON seq_cont			((exp, expleft)::seq_cont)

(* data type syntax *)
tyid: ID							(Symbol.symbol(ID))

ty: tyid							(A.NameTy(tyid, tyidleft))
| ARRAY OF tyid 					(A.ArrayTy(tyid, tyidleft))
| LBRACE tyfields RBRACE			(A.RecordTy(tyfields))

tyfield: ID COLON tyid				({name=Symbol.symbol ID, escape=ref true, typ=tyid, pos=IDleft})

tyfield_end: tyfield COMMA tyfield 	(tyfield::tyfield::nil)
| tyfield COMMA tyfield_end			(tyfield::tyfield_end)

tyfields: tyfield COMMA tyfield_end	(tyfield::tyfield_end)
| tyfield							(tyfield::nil)
| 									(nil)

(* declarition syntax *)
dec: vardec							(vardec)
| tydecs							(A.TypeDec(tydecs))
| fundecs							(A.FunctionDec(fundecs))

tydec: TYPE tyid EQ ty				({name=tyid, ty=ty, pos=TYPEleft})		

vardec: VAR ID ASSIGN exp			(A.VarDec({name=Symbol.symbol(ID), escape=ref true, typ=NONE, init=exp, pos=VARleft}))
| VAR ID COLON tyid ASSIGN exp		(A.VarDec({name=Symbol.symbol(ID), escape=ref true, typ=SOME(tyid,tyidleft), init=exp, pos=VARleft}))

(* A.fundec *)
fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp			({name=Symbol.symbol(ID),params=tyfields, result=NONE, body=exp, pos=FUNCTIONleft})
| FUNCTION ID LPAREN tyfields RPAREN COLON tyid EQ exp		({name=Symbol.symbol(ID),params=tyfields, result=SOME(tyid, tyidleft), body=exp, pos=FUNCTIONleft})

tydecs: tydec tydecs 				(tydec::tydecs)
| tydec 							(tydec::nil)

fundecs: fundec fundecs				(fundec::fundecs)
| fundec 							(fundec::nil)

decs: dec decs						(dec::decs)
| 									(nil)


